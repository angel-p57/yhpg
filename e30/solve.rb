def solve input
  # implement
  *ws,m=input.split(/\D/).map &:to_i
  buf=ws.map{[]}
  f,g=
    ->i,j{ buf[i][j]||=g[i,j] },
    ->i,j{
      return j+1 if i==0
      t=(j*ws[i]/ws[i-1]-1 .. ((j+1)*ws[i]-1)/ws[i-1]+1).map{|k| k<0 ? 0 : f[i-1,k] }
      (1..t.size-2).reduce(0){|s,k| t[k]==t[k-1]&&t[k]==t[k+1] ? s : s+t[k] } % 1000
    }
  f[ws.size-1,m-1]
end

def test(n,input,expected)
  actual=solve(input).to_s
  puts "#{n}: "+(actual==expected ? "ok":"ng ( #{actual} against #{expected} for #{input} )")
end

# test cases below
test( 0, "4,6,1,5/3", "14" )
test( 1, "1/1", "1" )
test( 2, "6/1", "1" )
test( 3, "4,6/3", "9" )
test( 4, "68/68", "68" )
test( 5, "360/10", "10" )
test( 6, "2,7,8/8", "256" )
test( 7, "37,88/71", "504" )
test( 8, "5,4,1,4/6", "10" )
test( 9, "123/4567", "4567" )
test( 10, "473,601/397", "9" )
test( 11, "47,89,82/38", "402" )
test( 12, "4,8,1,2,10/10", "98" )
test( 13, "5,6,7,9,5,2/5", "48" )
test( 14, "538,846,73/778", "213" )
test( 15, "80,48,65,83/100", "830" )
test( 16, "1,4,6,10,5,7,5/5", "904" )
test( 17, "10,4,1,6,1,2,3,5/3", "9" )
test( 18, "3,1,4,1,5,9,2/14", "385" )
test( 19, "33,32,75,24,36/76", "491" )
test( 20, "43,59,32,2,66,42/58", "849" )
test( 21, "985,178,756,798/660", "675" )
test( 22, "3,4,3,4,5,2,3,10,2/5", "334" )
test( 23, "9,3,4,3,1,9,4,9,3,9/5", "516" )
test( 24, "883,184,29,803,129/129", "154" )
test( 25, "4,77,53,79,16,21,100/59", "690" )
test( 26, "49,94,4,99,43,78,22,74/1", "282" )
test( 27, "292,871,120,780,431,83/92", "396" )
test( 28, "4,2,9,1,5,10,7,6,8,9,10/3", "234" )
test( 29, "9,5,7,6,9,3,4,10,8,6,4,5/6", "990" )
test( 30, "11,87,44,12,3,52,81,33,55/1", "384" )
test( 31, "9,2,6,9,5,1,3,6,1,9,2,1,4/9", "498" )
test( 32, "68,62,15,97,5,68,12,87,78,76/57", "751" )
test( 33, "792,720,910,374,854,561,306/582", "731" )
test( 34, "5,10,1,7,5,3,5,7,4,8,9,6,1,9,6/5", "768" )
test( 35, "7,2,7,8,3,4,2,10,6,10,3,1,10,2/10", "120" )
test( 36, "4,2,10,7,8,9,8,1,9,7,9,10,9,4,7,2/8", "40" )
test( 37, "41,55,80,12,39,94,2,96,45,89,25/68", "152" )
test( 38, "907,371,556,955,384,24,700,131/378", "600" )
test( 39, "30,68,36,40,10,74,42,24,4,47,91,51/4", "180" )
test( 40, "807,276,175,555,372,185,445,489,590/287", "80" )
test( 41, "92,41,37,49,26,68,36,31,30,34,19,18,94/85", "626" )
test( 42, "529,153,926,150,111,26,465,957,890,887/118", "114" )
test( 43, "59,1,87,64,17,37,95,25,64,68,52,9,57,92/94", "998" )
test( 44, "979,772,235,717,999,292,727,702,710,728,556/33", "912" )
test( 45, "40,93,46,27,75,53,50,92,52,100,19,35,52,31,54/59", "512" )
test( 46, "800,778,395,540,430,200,424,62,342,866,45,803/931", "260" )
test( 47, "85,90,67,61,17,57,24,25,5,50,88,31,55,26,21,98/58", "884" )
test( 48, "510,515,70,358,909,557,886,766,323,624,92,342,424/552", "238" )
test( 49, "892,751,88,161,148,585,456,88,14,315,594,121,885,952/833", "700" )
test( 50, "940,824,509,787,942,856,450,327,491,54,817,95,60,337,667/637", "206" )
test( 51, "408,412,30,930,372,822,632,948,855,503,8,618,138,695,897,852/377", "212" )
