def solve input
  # implement
  w=input.scan(/\[(\d)\]|(\d)|\/(\d+)/)
  n=w.pop[2].to_i
  x=w.map{|r| [(r[0]||r[1]).to_i,!r[1]] }
  b=x.count(&:last)
  u=n*x.size
  [*0...n].combination(b).select{|c|
    a=c.each_with_object([0]*n){|i,obj| obj[i]=1 }
    xw=x.dup
    bw=b
    i=z=0
    while bw>0
      break if z>u
      r=xw.shift
      if a[i]==1
        break if !r[1]
        bw-=1
        a[i]=0
        z=0
      else
        i=(i+r[0])%n
        xw.push(r)
        z+=1
      end
    end
    bw==0
  }.map{|c| c.each_with_object([0]*n){|i,a| a[i]=1 }*"" }
end

def test(n,input,expected)
  actual=solve(input).to_s
  puts "#{n}: "+(actual.include?(expected) ? "ok ( #{actual} )":"ng ( #{actual} does not include #{expected} for #{input} )")
end

# test cases below
test( 0, "3[2]3/6", "000100")
test( 1, "31[2]/6", "000010")
test( 2, "32[1]/6", "000001")
test( 3, "[2][2]2/6", "100010")
test( 4, "1[3][2]/6", "010010")
test( 5, "2[2]2/6", "001000")
test( 6, "2[1]23/7", "0010000")
test( 7, "13[1]3/7", "0000100")
test( 8, "[4]2[1]2/7", "1010000")
test( 9, "3[1][2]2[2]/8", "00011010")
test( 10, "4[4]21[1]/8", "00001001")
test( 11, "[2][2]124/8", "11000000")
test( 12, "[3]4[2][1][3]3/9", "100010110")
test( 13, "[2][1]43[2]3/9", "101010000")
test( 14, "3[3][1]4[1]3/9", "010100100")
test( 15, "[3][5][3]554[4]/10", "1100001100")
test( 16, "[3]2[3][5][3]45/10", "1110010000")
test( 17, "53[1]4[1]2[4]/10", "0010100010")
test( 18, "2[3][2]5[4]54[1]/11", "00110010100")
test( 19, "[3][5]554[2]25/11", "10000010010")
test( 20, "[1]5[5]413[5]2/11", "10100100000")
test( 21, "[1]33[3]52[5][4]2/12", "110000101000")
test( 22, "4[4]3[1][3]4[1]4[3]/12", "010011010100")
test( 23, "[3]2[1][2]14[2]54/12", "101100000010")
test( 24, "[2][6]45[3][2]42[6]2/13", "1001100011000")
test( 25, "[1]2[3][3]6[3][1]56[4]/13", "1010001010101")
test( 26, "3[4]213[6]1[1]5[6]/13", "0011000001100")
test( 27, "6[3]8[8]8[6]4[4][2][8][7][9]/15", "000101111011001")
test( 28, "[4]6[5]15[2]6[5]343[2]/15", "100100100000110")
test( 29, "66[6]2[9]6[6][9]5[6]11/15", "001001010000101")
